
1:For the below binary number , count the Occurrence of sequence '101'
10101010100111101

string="10101010100111101"
count=0
for i in range(0,len(string)-2):
  if string[i]=='1' and  string[i+1]=='0' and string[i+2]=='1':
    count=count+1
  else:
      continue
print(count)

2: For the below matrix , calculate both the diagonal and print the value.(Hint: consider each row as a list object)

3 8 7

8 7 9

1 6 0

row = int(input("Enter the number of rows:")) 
col = int(input("Enter the number of columns:")) 
matrix = [] 
print("Enter the entries rowwise:") 
for i in range(row):         
    a =[] 
    for j in range(col):     
         a.append(int(input())) 
    matrix.append(a)
print(matrix)

d1,d2=0,0
for i in range(row):
  for j in range(col):
    if i==j:
      print("first",matrix[i][j],i,j)
      d1=d1+matrix[i][j]
    if i+j==row-1:
      print("second",matrix[i][j],i,j)
      d2=d2+matrix[i][j]
print(d1)
print(d2)

 

3 :Rotate the above matrix by 90 degree anticlockwise

hint :convert row to column and column to row

 row = int(input("Enter the number of rows:")) 
col = int(input("Enter the number of columns:")) 
matrix = [] 
print("Enter the entries rowwise:") 
for i in range(row):         
    a =[] 
    for j in range(col):     
         a.append(int(input())) 
    matrix.append(a)
print(matrix)

new_matrix=[]
for i in range(len(matrix[0])):
  li = list(map(lambda x: x[i], matrix))
  print(li)
  li.reverse()
  new_matrix.append(li)
print(new_matrix)



list1=[[3,8,7],[8,7,9],[1,6,0]]
   count1=0
   count2=0
   j=len(list1)-1
   for i in range(len(list1)):
       print 'left:',list1[i][i]
       count1=count1+list1[i][i]
       print 'right:',list1[i][j]
       count2 = count2 + list1[i][j]
     j = j - 1
 print 'left count:',count1
 print 'right count:',count2

4: The string abcabcabc........ goes till 1111 . print the number of Occurrence of 'ca'

 str1="abc"
 str2=str1*370+"a"
 print(str2)
 print(str2.count("ca"))

5: Convert the string as below.

input : abcDEwQ

output: ABCdeWq

string="abcDEwQ"
string2=""
for i in string:

  if ord(i)>=65 and ord(i)<=87:
    string2=string2+chr(ord(i)+32)
  else:
    string2=string2+chr(ord(i)-32)
print(string2)
 

6: Find the ordered longest alphabetical sequence.
abccdefabcdefae

string='abccdefabcdefae'
 str1=''
 list1=[]
 length=0
 for i in range(len(string)-1):
     if ord(string[i])-ord(string[i+1])==-1:
         str1=str1+string[i]
     else:
         str1=str1+string[i]
         list1.append(str1)
         str1=""
 str1=str1+string[len(string)-1]
 list1.append(str1)
 for word in list1:
     if len(word)>length:
         length=len(word)
         sequence=word
 print sequence,length

7:Find the sum of multiples of 3 and 5 between 1 to 1000

 sum=0
for i in range(1,1000):
  if i%3==0 or i%5==0:
    sum=sum+i
  continue
print(sum)


8: Display the phone number as below and also print the last 4 digit in ascending order

input : 9993452133

output :xxx-xxx-xxxx

num=9993452133
phno=str(num)
print(phno)
s=''
s1=""
for i in range(0,len(phno)):
  s=s+'x'
  if i==2:
    s=s+'-'
  if i==5:
    s=s+'-'
  if i>=len(phno)-4:
    s1=s1+str(phno[i])
print(s)
print(''.join(sorted(s1)))

9: "There are 26 alphabets in English out of which 5 are vowels and 21 are consonants"

Count the sum of numbers in the above statement using regular expression

 string="There are 26 alphabets in English out of which 5 are vowels and 21 are consonants"
 p=re.compile('\d+')
 list1=p.findall(string)
 print(list1)
 sum=0
 for i in list1:
     sum=sum+int(i)
 print(sum)


10.anagram : sample inputs : tear, rate ; Find if these words are anagram or not. Program should accept two inputs from user.

a=input("Enter string1")
b=input("Enter string2")
 if len(a)!=len(b):
     print "Not an anagram"
 else:
     c = a.lower()
     d = b.lower()

     for i in range(0,len(a)):
         if list(c).sort()!=list(d).sort():
             print "Not an anagram"
     print "Anagram"

11;With a given integral number n, change the program to generate a dictionary that contains (i, cube of i) such that is an integral number between 1 and n (both included).

and then the program should print the dictionary.

Suppose the following input is supplied to the program:

7

Then, the output should be:

{1: 1, 2: 8, 3: 27, 4: 64, 5: 125, 6: 216, 7: 373}

Take the input from the user via console.

num=input("enter the range")
dict1={}
for i in range(1,num):
    print(i^3)
    dict1[i]=i**3
print(dict1)
 

12: find if the below numbers are Armstrong number

num=input("Enter a number")
order = len(str(num))

sum = 0

temp = num
while temp > 0:
   digit = temp % 10
   sum += digit ** order
   temp //= 10


if num == sum:
   print(num,"is an Armstrong number")
else:
   print(num,"is not an Armstrong number")
